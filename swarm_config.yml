---
- hosts: "{{ docker_ca_group }}"
  vars:
    # vagrant_mc_name: "{{ docker_ca_host }}"
    # ansible_sudo_pass: q
  roles:
    - role: docker-ca
      when: docker_connect_secure
      vars:
        docker_connection_list: "{{ docker_base_connection_list | union(groups['bootstrap']) | union(groups['masters']) }}"

- hosts: localhost
  vars:
    vagrant_mc_name: localhost
    ansible_sudo_pass: q
    docker_connect_certs_path: docker-certs
    docker_remote_cert_list:
      - client
    docker_remote_copy_cert: no
  roles:
    - role: docker-cs-requestor
      when: docker_connect_secure
    - role: docker-remote-cert-holder
      when: docker_connect_secure

- hosts: all
  roles:
    - role: docker-photon-config
      when: ansible_lsb.codename == 'Photon'
  post_tasks:
    - name: ensure docker daemon started
      systemd: state=started name=docker

- hosts:
    - bootstrap
    - masters
  roles:
    - role: docker-cs-requestor
      when: docker_connect_secure
    - role: docker-remote-cert-holder
      when: docker_connect_secure
    - role: docker-remote-connectable

- hosts: all
  tasks:
    - name: fetch id of docker_gwbridge
      command: docker network ls -f name=docker_gwbridge -q
      changed_when: no
      register: bridge_details
    - name: create docker_gwbridge network
      command: "docker network create --subnet=10.196.0.0/23 --gateway=10.196.0.1 -o com.docker.network.bridge.enable_icc=false -o com.docker.network.bridge.enable_ip_masquerade=true -o com.docker.network.bridge.name=docker1 docker_gwbridge"
      when: bridge_details.stdout == ''

- hosts: bootstrap
  roles:
    - role: docker-swarm-bootstrap
      register: tokens
  tasks:
    - name: set tokens as facts
      set_fact:
        "token_{{ item.item }}": "{{ item.stdout }}"
      with_items: "{{ tokens.results }}"

- hosts: 
    - masters
    - nodes
  vars:
    token_mapping:
      masters: manager
      nodes: worker
    token_key: "token_{{ token_mapping[group_names[0]] }}"
  roles:
    - role: docker-swarm-member
      vars:
        swarm_token: "{{ hostvars[groups['bootstrap'][0]][token_key] }}"
        swarm_master: "{{ hostvars[groups['bootstrap'][0]]['ansible_ipv4']['address'] }}"

- hosts: all
  tasks:
    - name: label the nodes with group name
      command: "docker node update --label-add type={{ group_names[0] }} {{ inventory_hostname_short }}"
      delegate_to: "{{ groups['bootstrap'][0] }}"
